kotlin version: 2.0.0-Beta5
error message: org.jetbrains.kotlin.backend.common.CompilationException: Back-end: Please report this problem https://kotl.in/issue
/Users/simonvergauwen/Developer/kotlin-openapi/src/commonMain/kotlin/io/github/nomisrev/openapi/Responses.kt:43:3
Problem with `companion object Companion {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun serializer(): KSerializer<Responses> {
    return Serializer
  }

  internal object Serializer : KSerializer<Responses> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override val descriptor: SerialDescriptor
      field = ResponsesDescriptor
      override get

    private val elementSerializer: KSerializer<Referenced<Response>>
      field = Companion.serializer<Response>(typeSerial0 = Companion.serializer())
      private get

    private val responsesSerializer: KSerializer<Map<Int, Referenced<Response>>>
      field = MapSerializer<Int, Referenced<Response>>(keySerializer = Companion.serializer(), valueSerializer = <this>.<get-elementSerializer>())
      private get

    override fun deserialize(decoder: Decoder): Responses {
      val json: JsonObject = decoder.decodeSerializableValue<JsonElement>(deserializer = Companion.serializer()).<get-jsonObject>()
      val default: Referenced<Response>? = when {
        json.contains<String, JsonElement>(key = "default") -> Default.decodeFromJsonElement<Referenced<Response>>(deserializer = <this>.<get-elementSerializer>(), element = json.getValue<String, JsonElement>(key = "default"))
        else -> null
      }
      val responses: Map<Int, Referenced<Response>> = when {
        json.contains<String, JsonElement>(key = "responses") -> Default.decodeFromJsonElement<Map<Int, Referenced<Response>>>(deserializer = <this>.<get-responsesSerializer>(), element = json.getValue<String, JsonElement>(key = "responses"))
        else -> emptyMap<Int, Referenced<Response>>()
      }
      return Responses(default = default, responses = responses)
    }

    override fun serialize(encoder: Encoder, value: Responses) {
      val size: Int = value.<get-responses>().<get-size>().plus(other = { // BLOCK
        val tmp0_elvis_lhs: Int? = { // BLOCK
          val tmp3_safe_receiver: Referenced<Response>? = value.<get-default>()
          when {
            EQEQ(arg0 = tmp3_safe_receiver, arg1 = null) -> null
            else -> tmp3_safe_receiver.let<Referenced<Response>, Int>(block = local fun <anonymous>(it: Referenced<Response>): Int {
              return 1
            }
)
          }
        }
        when {
          EQEQ(arg0 = tmp0_elvis_lhs, arg1 = null) -> 0
          else -> tmp0_elvis_lhs
        }
      })
      val composite: CompositeEncoder = encoder.beginCollection(descriptor = <this>.<get-descriptor>(), collectionSize = size)
      var index: Int = 0
      { // BLOCK
        val tmp4_safe_receiver: Referenced<Response>? = value.<get-default>()
        when {
          EQEQ(arg0 = tmp4_safe_receiver, arg1 = null) -> null
          else -> tmp4_safe_receiver.let<Referenced<Response>, Unit>(block = local fun <anonymous>(it: Referenced<Response>) {
            composite.encodeStringElement(descriptor = Serializer.<get-descriptor>(), index = { // BLOCK
              val <unary>: Int = index
              index = <unary>.inc()
              <unary>
            }, value = "default")
            composite.encodeSerializableElement<Referenced<Response>>(descriptor = Serializer.<get-descriptor>(), index = { // BLOCK
              val <unary>: Int = index
              index = <unary>.inc()
              <unary>
            }, serializer = Serializer.<get-elementSerializer>(), value = it)
          }
)
        }
      } /*~> Unit */
      value.<get-responses>().forEach<Int, Referenced<Response>>(action = local fun <anonymous>(<destruct>: Entry<Int, Referenced<Response>>) {
        val statusCode: Int = <destruct>.component1<Int, Referenced<Response>>()
        val response: Referenced<Response> = <destruct>.component2<Int, Referenced<Response>>()
        { // BLOCK
          composite.encodeIntElement(descriptor = Serializer.<get-descriptor>(), index = { // BLOCK
            val <unary>: Int = index
            index = <unary>.inc()
            <unary>
          }, value = statusCode)
          composite.encodeSerializableElement<Referenced<Response>>(descriptor = Serializer.<get-descriptor>(), index = { // BLOCK
            val <unary>: Int = index
            index = <unary>.inc()
            <unary>
          }, serializer = Serializer.<get-elementSerializer>(), value = response)
        }
      }
)
      composite.endStructure(descriptor = <this>.<get-descriptor>())
    }

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

  }

  fun serializer(): KSerializer<Responses>

  /* fake */ override operator fun equals(other: Any?): Boolean

  /* fake */ override fun hashCode(): Int

  /* fake */ override fun toString(): String

}

`
Details: kotlinx.serialization compiler plugin internal error: unable to transform declaration, see cause
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:228)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:46)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitClass(IrElementVisitorVoid.kt:44)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.declarations.IrClass.accept(IrClass.kt:72)
	at org.jetbrains.kotlin.ir.declarations.IrClass.acceptChildren(IrClass.kt:76)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptChildrenVoid(IrVisitors.kt:15)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:47)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitClass(IrElementVisitorVoid.kt:44)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.declarations.IrClass.accept(IrClass.kt:72)
	at org.jetbrains.kotlin.ir.declarations.IrFile.acceptChildren(IrFile.kt:34)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptChildrenVoid(IrVisitors.kt:15)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitElement(SerializationLoweringExtension.kt:42)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitPackageFragment(IrElementVisitorVoid.kt:168)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitPackageFragment(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitFile(IrElementVisitorVoid.kt:184)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitFile(IrElementVisitorVoid.kt:180)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.declarations.IrFile.accept(IrFile.kt:28)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptVoid(IrVisitors.kt:11)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt.runOnFileInOrder(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtension.generate(SerializationLoweringExtension.kt:193)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.applyIrGenerationExtensions(convertToIr.kt:260)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize(convertToIr.kt:139)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize$default(convertToIr.kt:65)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.CompilerPipelineKt.convertToIrAndActualizeForJvm(compilerPipeline.kt:191)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.CompilerPipelineKt.convertAnalyzedFirToIr(compilerPipeline.kt:165)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.CompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(compilerPipeline.kt:136)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:156)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:50)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:104)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:48)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:453)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:62)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:676)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1663)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:598)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:844)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:721)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:720)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalStateException: Can't find synthesized 'Companion.serializer()' function to generate, probably clash with user-defined function has occurred
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableCompanionIrGenerator.generate(SerializableCompanionIrGenerator.kt:67)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableCompanionIrGenerator$Companion.generate(SerializableCompanionIrGenerator.kt:57)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:147)
	... 61 more


